// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eragon-mdi/sso/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: _a0, _a1, _a2
func (_m *AuthService) Login(_a0 context.Context, _a1 domain.User, _a2 domain.DeviceCtx) (domain.Token, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 domain.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, domain.DeviceCtx) (domain.Token, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, domain.DeviceCtx) domain.Token); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(domain.Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User, domain.DeviceCtx) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.User
//   - _a2 domain.DeviceCtx
func (_e *AuthService_Expecter) Login(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AuthService_Login_Call {
	return &AuthService_Login_Call{Call: _e.mock.On("Login", _a0, _a1, _a2)}
}

func (_c *AuthService_Login_Call) Run(run func(_a0 context.Context, _a1 domain.User, _a2 domain.DeviceCtx)) *AuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User), args[2].(domain.DeviceCtx))
	})
	return _c
}

func (_c *AuthService_Login_Call) Return(_a0 domain.Token, _a1 error) *AuthService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_Login_Call) RunAndReturn(run func(context.Context, domain.User, domain.DeviceCtx) (domain.Token, error)) *AuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: _a0, _a1, _a2
func (_m *AuthService) Logout(_a0 context.Context, _a1 string, _a2 domain.DeviceCtx) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.DeviceCtx) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 domain.DeviceCtx
func (_e *AuthService_Expecter) Logout(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AuthService_Logout_Call {
	return &AuthService_Logout_Call{Call: _e.mock.On("Logout", _a0, _a1, _a2)}
}

func (_c *AuthService_Logout_Call) Run(run func(_a0 context.Context, _a1 string, _a2 domain.DeviceCtx)) *AuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.DeviceCtx))
	})
	return _c
}

func (_c *AuthService_Logout_Call) Return(_a0 error) *AuthService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_Logout_Call) RunAndReturn(run func(context.Context, string, domain.DeviceCtx) error) *AuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: _a0, _a1, _a2
func (_m *AuthService) Refresh(_a0 context.Context, _a1 string, _a2 domain.DeviceCtx) (domain.Token, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 domain.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.DeviceCtx) (domain.Token, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.DeviceCtx) domain.Token); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(domain.Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.DeviceCtx) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type AuthService_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 domain.DeviceCtx
func (_e *AuthService_Expecter) Refresh(_a0 interface{}, _a1 interface{}, _a2 interface{}) *AuthService_Refresh_Call {
	return &AuthService_Refresh_Call{Call: _e.mock.On("Refresh", _a0, _a1, _a2)}
}

func (_c *AuthService_Refresh_Call) Run(run func(_a0 context.Context, _a1 string, _a2 domain.DeviceCtx)) *AuthService_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.DeviceCtx))
	})
	return _c
}

func (_c *AuthService_Refresh_Call) Return(_a0 domain.Token, _a1 error) *AuthService_Refresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_Refresh_Call) RunAndReturn(run func(context.Context, string, domain.DeviceCtx) (domain.Token, error)) *AuthService_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *AuthService) Register(_a0 context.Context, _a1 domain.User) (domain.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (domain.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) domain.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type AuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.User
func (_e *AuthService_Expecter) Register(_a0 interface{}, _a1 interface{}) *AuthService_Register_Call {
	return &AuthService_Register_Call{Call: _e.mock.On("Register", _a0, _a1)}
}

func (_c *AuthService_Register_Call) Run(run func(_a0 context.Context, _a1 domain.User)) *AuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *AuthService_Register_Call) Return(_a0 domain.User, _a1 error) *AuthService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_Register_Call) RunAndReturn(run func(context.Context, domain.User) (domain.User, error)) *AuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
