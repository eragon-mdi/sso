// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eragon-mdi/sso/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// PermissionService is an autogenerated mock type for the PermissionService type
type PermissionService struct {
	mock.Mock
}

type PermissionService_Expecter struct {
	mock *mock.Mock
}

func (_m *PermissionService) EXPECT() *PermissionService_Expecter {
	return &PermissionService_Expecter{mock: &_m.Mock}
}

// IsAdmin provides a mock function with given fields: _a0, _a1
func (_m *PermissionService) IsAdmin(_a0 context.Context, _a1 domain.User) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PermissionService_IsAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAdmin'
type PermissionService_IsAdmin_Call struct {
	*mock.Call
}

// IsAdmin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.User
func (_e *PermissionService_Expecter) IsAdmin(_a0 interface{}, _a1 interface{}) *PermissionService_IsAdmin_Call {
	return &PermissionService_IsAdmin_Call{Call: _e.mock.On("IsAdmin", _a0, _a1)}
}

func (_c *PermissionService_IsAdmin_Call) Run(run func(_a0 context.Context, _a1 domain.User)) *PermissionService_IsAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *PermissionService_IsAdmin_Call) Return(_a0 bool, _a1 error) *PermissionService_IsAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PermissionService_IsAdmin_Call) RunAndReturn(run func(context.Context, domain.User) (bool, error)) *PermissionService_IsAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// NewPermissionService creates a new instance of PermissionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionService {
	mock := &PermissionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
