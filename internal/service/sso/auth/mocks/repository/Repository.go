// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eragon-mdi/sso/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetUserInfoByEmail provides a mock function with given fields: _a0, _a1
func (_m *Repository) GetUserInfoByEmail(_a0 context.Context, _a1 string) (domain.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfoByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetUserInfoByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfoByEmail'
type Repository_GetUserInfoByEmail_Call struct {
	*mock.Call
}

// GetUserInfoByEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *Repository_Expecter) GetUserInfoByEmail(_a0 interface{}, _a1 interface{}) *Repository_GetUserInfoByEmail_Call {
	return &Repository_GetUserInfoByEmail_Call{Call: _e.mock.On("GetUserInfoByEmail", _a0, _a1)}
}

func (_c *Repository_GetUserInfoByEmail_Call) Run(run func(_a0 context.Context, _a1 string)) *Repository_GetUserInfoByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetUserInfoByEmail_Call) Return(_a0 domain.User, _a1 error) *Repository_GetUserInfoByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetUserInfoByEmail_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *Repository_GetUserInfoByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewUser provides a mock function with given fields: _a0, _a1
func (_m *Repository) NewUser(_a0 context.Context, _a1 domain.User) (domain.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) (domain.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) domain.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_NewUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewUser'
type Repository_NewUser_Call struct {
	*mock.Call
}

// NewUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.User
func (_e *Repository_Expecter) NewUser(_a0 interface{}, _a1 interface{}) *Repository_NewUser_Call {
	return &Repository_NewUser_Call{Call: _e.mock.On("NewUser", _a0, _a1)}
}

func (_c *Repository_NewUser_Call) Run(run func(_a0 context.Context, _a1 domain.User)) *Repository_NewUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *Repository_NewUser_Call) Return(_a0 domain.User, _a1 error) *Repository_NewUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_NewUser_Call) RunAndReturn(run func(context.Context, domain.User) (domain.User, error)) *Repository_NewUser_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeTokenByHash provides a mock function with given fields: _a0, _a1
func (_m *Repository) RevokeTokenByHash(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RevokeTokenByHash")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RevokeTokenByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeTokenByHash'
type Repository_RevokeTokenByHash_Call struct {
	*mock.Call
}

// RevokeTokenByHash is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *Repository_Expecter) RevokeTokenByHash(_a0 interface{}, _a1 interface{}) *Repository_RevokeTokenByHash_Call {
	return &Repository_RevokeTokenByHash_Call{Call: _e.mock.On("RevokeTokenByHash", _a0, _a1)}
}

func (_c *Repository_RevokeTokenByHash_Call) Run(run func(_a0 context.Context, _a1 string)) *Repository_RevokeTokenByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_RevokeTokenByHash_Call) Return(_a0 error) *Repository_RevokeTokenByHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RevokeTokenByHash_Call) RunAndReturn(run func(context.Context, string) error) *Repository_RevokeTokenByHash_Call {
	_c.Call.Return(run)
	return _c
}

// RotateToken provides a mock function with given fields: _a0, oldHash, newRT
func (_m *Repository) RotateToken(_a0 context.Context, oldHash string, newRT domain.RefreshToken) error {
	ret := _m.Called(_a0, oldHash, newRT)

	if len(ret) == 0 {
		panic("no return value specified for RotateToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.RefreshToken) error); ok {
		r0 = rf(_a0, oldHash, newRT)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RotateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateToken'
type Repository_RotateToken_Call struct {
	*mock.Call
}

// RotateToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - oldHash string
//   - newRT domain.RefreshToken
func (_e *Repository_Expecter) RotateToken(_a0 interface{}, oldHash interface{}, newRT interface{}) *Repository_RotateToken_Call {
	return &Repository_RotateToken_Call{Call: _e.mock.On("RotateToken", _a0, oldHash, newRT)}
}

func (_c *Repository_RotateToken_Call) Run(run func(_a0 context.Context, oldHash string, newRT domain.RefreshToken)) *Repository_RotateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.RefreshToken))
	})
	return _c
}

func (_c *Repository_RotateToken_Call) Return(_a0 error) *Repository_RotateToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_RotateToken_Call) RunAndReturn(run func(context.Context, string, domain.RefreshToken) error) *Repository_RotateToken_Call {
	_c.Call.Return(run)
	return _c
}

// SaveRefreshToken provides a mock function with given fields: _a0, _a1
func (_m *Repository) SaveRefreshToken(_a0 context.Context, _a1 domain.RefreshToken) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.RefreshToken) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_SaveRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveRefreshToken'
type Repository_SaveRefreshToken_Call struct {
	*mock.Call
}

// SaveRefreshToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.RefreshToken
func (_e *Repository_Expecter) SaveRefreshToken(_a0 interface{}, _a1 interface{}) *Repository_SaveRefreshToken_Call {
	return &Repository_SaveRefreshToken_Call{Call: _e.mock.On("SaveRefreshToken", _a0, _a1)}
}

func (_c *Repository_SaveRefreshToken_Call) Run(run func(_a0 context.Context, _a1 domain.RefreshToken)) *Repository_SaveRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.RefreshToken))
	})
	return _c
}

func (_c *Repository_SaveRefreshToken_Call) Return(_a0 error) *Repository_SaveRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_SaveRefreshToken_Call) RunAndReturn(run func(context.Context, domain.RefreshToken) error) *Repository_SaveRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
