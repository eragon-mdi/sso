// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/eragon-mdi/sso/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Tokener is an autogenerated mock type for the Tokener type
type Tokener struct {
	mock.Mock
}

type Tokener_Expecter struct {
	mock *mock.Mock
}

func (_m *Tokener) EXPECT() *Tokener_Expecter {
	return &Tokener_Expecter{mock: &_m.Mock}
}

// GenPair provides a mock function with given fields: _a0
func (_m *Tokener) GenPair(_a0 domain.Meta) ([]byte, []byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenPair")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(domain.Meta) ([]byte, []byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(domain.Meta) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Meta) []byte); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(domain.Meta) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Tokener_GenPair_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenPair'
type Tokener_GenPair_Call struct {
	*mock.Call
}

// GenPair is a helper method to define mock.On call
//   - _a0 domain.Meta
func (_e *Tokener_Expecter) GenPair(_a0 interface{}) *Tokener_GenPair_Call {
	return &Tokener_GenPair_Call{Call: _e.mock.On("GenPair", _a0)}
}

func (_c *Tokener_GenPair_Call) Run(run func(_a0 domain.Meta)) *Tokener_GenPair_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Meta))
	})
	return _c
}

func (_c *Tokener_GenPair_Call) Return(access []byte, refresh []byte, err error) *Tokener_GenPair_Call {
	_c.Call.Return(access, refresh, err)
	return _c
}

func (_c *Tokener_GenPair_Call) RunAndReturn(run func(domain.Meta) ([]byte, []byte, error)) *Tokener_GenPair_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyRefresh provides a mock function with given fields: _a0
func (_m *Tokener) VerifyRefresh(_a0 []byte) (domain.Meta, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for VerifyRefresh")
	}

	var r0 domain.Meta
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (domain.Meta, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) domain.Meta); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Meta)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tokener_VerifyRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyRefresh'
type Tokener_VerifyRefresh_Call struct {
	*mock.Call
}

// VerifyRefresh is a helper method to define mock.On call
//   - _a0 []byte
func (_e *Tokener_Expecter) VerifyRefresh(_a0 interface{}) *Tokener_VerifyRefresh_Call {
	return &Tokener_VerifyRefresh_Call{Call: _e.mock.On("VerifyRefresh", _a0)}
}

func (_c *Tokener_VerifyRefresh_Call) Run(run func(_a0 []byte)) *Tokener_VerifyRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Tokener_VerifyRefresh_Call) Return(_a0 domain.Meta, _a1 error) *Tokener_VerifyRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tokener_VerifyRefresh_Call) RunAndReturn(run func([]byte) (domain.Meta, error)) *Tokener_VerifyRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokener creates a new instance of Tokener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokener(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tokener {
	mock := &Tokener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
