// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PasswordHasher is an autogenerated mock type for the PasswordHasher type
type PasswordHasher struct {
	mock.Mock
}

type PasswordHasher_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordHasher) EXPECT() *PasswordHasher_Expecter {
	return &PasswordHasher_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function with given fields: hash, pass
func (_m *PasswordHasher) Compare(hash []byte, pass []byte) (bool, error) {
	ret := _m.Called(hash, pass)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) (bool, error)); ok {
		return rf(hash, pass)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(hash, pass)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(hash, pass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordHasher_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type PasswordHasher_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - hash []byte
//   - pass []byte
func (_e *PasswordHasher_Expecter) Compare(hash interface{}, pass interface{}) *PasswordHasher_Compare_Call {
	return &PasswordHasher_Compare_Call{Call: _e.mock.On("Compare", hash, pass)}
}

func (_c *PasswordHasher_Compare_Call) Run(run func(hash []byte, pass []byte)) *PasswordHasher_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *PasswordHasher_Compare_Call) Return(_a0 bool, _a1 error) *PasswordHasher_Compare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordHasher_Compare_Call) RunAndReturn(run func([]byte, []byte) (bool, error)) *PasswordHasher_Compare_Call {
	_c.Call.Return(run)
	return _c
}

// Gen provides a mock function with given fields: _a0
func (_m *PasswordHasher) Gen(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Gen")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordHasher_Gen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gen'
type PasswordHasher_Gen_Call struct {
	*mock.Call
}

// Gen is a helper method to define mock.On call
//   - _a0 []byte
func (_e *PasswordHasher_Expecter) Gen(_a0 interface{}) *PasswordHasher_Gen_Call {
	return &PasswordHasher_Gen_Call{Call: _e.mock.On("Gen", _a0)}
}

func (_c *PasswordHasher_Gen_Call) Run(run func(_a0 []byte)) *PasswordHasher_Gen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *PasswordHasher_Gen_Call) Return(_a0 []byte, _a1 error) *PasswordHasher_Gen_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordHasher_Gen_Call) RunAndReturn(run func([]byte) ([]byte, error)) *PasswordHasher_Gen_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordHasher creates a new instance of PasswordHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordHasher {
	mock := &PasswordHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
